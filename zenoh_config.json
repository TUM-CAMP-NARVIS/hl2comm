{
  mode: "peer",

  connect: {
    endpoints: [
      // "<proto>/<address>"
    ],
  },

  listen: {
    endpoints: [
      // "<proto>/<address>"
    ],
  },
  scouting: {
    timeout: 3000,
    delay: 200,
    multicast: {
      enabled: true,
      address: "224.0.0.224:7446",
      interface: "auto", // If not set or set to "auto" the interface if picked automatically
      autoconnect: { router: "", peer: "router|peer" },
      listen: true,
    },
    gossip: {
      enabled: true,
      multihop: false,
      autoconnect: { router: "", peer: "router|peer" },
    },
  },

  timestamping: {
    enabled: { router: true, peer: false, client: false },
    drop_future_timestamp: false,
  },

  queries_default_timeout: 10000,

  routing: {
    router: {
      peers_failover_brokering: true,
    },
    peer: {
      mode: "peer_to_peer",
    },
  },

  transport: {
    unicast: {
      accept_timeout: 10000,
      accept_pending: 100,
      max_sessions: 1000,
      max_links: 1,
    },
    qos: {
      enabled: true,
    },
    link: {
      tx: {
        sequence_number_resolution: 268435456,
        lease: 10000,
        keep_alive: 4,
        batch_size: 65535,
        queue: {
          size: {
            control: 1,
            real_time: 1,
            interactive_high: 1,
            interactive_low: 1,
            data_high: 2,
            data: 4,
            data_low: 4,
            background: 4,
          },
          backoff: 100,
        },
      },
      rx: {
        buffer_size: 65535,
        max_message_size: 1073741824,
      },
      tls: {
        root_ca_certificate: null,
        server_private_key: null,
        server_certificate: null,
        client_auth: false,
        client_private_key: null,
        client_certificate: null,
      },

      compression: {
        enabled: false,
      },
    },
    shared_memory: {
      enabled: true,
    },
    auth: {
      usrpwd: {
        user: null,
        password: null,
        dictionary_file: null,
      },
      pubkey: {
        public_key_pem: null,
        private_key_pem: null,
        public_key_file: null,
        private_key_file: null,
        key_size: null,
        known_keys_file: null,
      },
    },
  },

  adminspace: {
    permissions: {
      read: true,
      write: true,
    },
  },

  plugins: {
    rest: {
      __required__: true, // defaults to false
      http_port: 8000,
    },
    // configuration of "storage-manager" plugin:
    storage_manager: {
      backend_search_dirs: [
        "D:/develop/apps/zenoh_ecosystem/zenoh/target/release", 
        "D:/develop/apps/zenoh_ecosystem/external/zenoh-backend-filesystem/target/release"],
      volumes: {
        // configuration of a "fs" volume (the "zenoh_backend_fs" backend library will be loaded at startup)
        fs: {},
      },
      storages: {
        // configuration of a "demo" storage using the "fs" volume
        tcn_local: {
          // the key expression this storage will subscribes to
          key_expr: "tcn/loc/*/*/cfg/**",
          // this prefix will be stripped from the received key when converting to file path
          // this argument is optional.
          strip_prefix: "tcn/loc",
          volume: {
            id: "fs",
            // the key/values will be stored as files within this directory (relative to ${ZENOH_BACKEND_FS_ROOT})
            dir: "tcn_loc_cfg"
          }
        }
      }
    },
  },
}
